
Event Start

	LoadWWPContext_Login.Call(&WWPContext_Login)
	
	//Pedido de Compra (Primeira aba)
	
	PedidoCompra_PedidoCompraCondicaoPagamentoDescricao.Enabled = false
	PedidoCompra_PedidoCompraData.Enabled = false
	&PedidoCompra.PedidoCompraData = &Today
	PedidoCompra_PedidoCompraSituacao.Enabled = false
	PedidoCompra_PedidoCompraFornecedorRazaoSocial.Enabled = false
	PedidoCompra_PedidoCompraFuncionarioRazaoSocial.Enabled = false
	PedidoCompra_PedidoCompraTransportadoraRazaoSocial.Enabled = false
	PedidoCompra_PedidoCompraFreteValor.Enabled = false
	
	//SDT Pedido de Compra Produto (Segunda aba)
	
	SDTPedidoCompraProduto_PedidoCompraProdutoDescricao.Enabled = false
	SDTPedidoCompraProduto_PedidoCompraProdutoMotivoDespesaDescricao.Enabled = false
	SDTPedidoCompraProduto_PedidoCompraProdutoCentroCustoDescricao.Enabled = false
	SDTPedidoCompraProduto_PedidoCompraProdutoValorTotal.Enabled = false
	SDTPedidoCompraProduto_PedidoCompraProdutoValorTotalIPI.Enabled = false
	SDTPedidoCompraProduto_PedidoCompraProdutoUM.Enabled = false
	SDTPedidoCompraProduto_PedidoCompraProdutoPrecoCompra.Enabled = false
	SDTPedidoCompraProduto_PedidoCompraProdutoQuantidadeSaldo.Enabled = false
	
	//Pedido de Compra Parcela (Terceira aba)
	
	&PedidoCompraParcelaSequencia.Enabled = false
	&Method_Custom.HideShow("HTML_DVPANEL_LEVEL31")
	&PedidoCompraParcelaDataVencimentoGrid.Enabled = true
	&PedidoCompraParcelaValorGrid.Enabled = true
//	SDTPedidoCompraParcela_PedidoCompraParcelaDataVencimento.Enabled = true
//	SDTPedidoCompraParcela_PedidoCompraParcelaValor.Enabled = true
	
	//Botões
	
	BtnBUpdateProduto.Visible = false
	BtnBNovoProduto.Visible = false
	BtnBRecalculaParcelas.Visible = false
	BtnBRecalculaParcelas.Caption = 'Calcular Parcelas'
	BtnBNovoParcela.Visible = false
	BtnBConfirmarParcelas.Visible = false
	BtnBEditarParcelas.Visible = false	
	
	// Variáveis
	
	&SequenciaAtual = 0
	&IsInvalid = true
	&IsFirstTime = true
	&IsFirstClick = true
	&IsToggled = false

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	SDTPedidoCompraProduto_PedidoCompraProdutoSequencia.Visible = False
	PedidoCompra_PedidoCompraId.Visible = False
	PedidoCompra_PedidoCompraInclusaoUsuarioId.Visible = False
	PedidoCompra_PedidoCompraInclusaoUsuarioNome.Visible = False
	PedidoCompra_PedidoCompraInclusaoData.Visible = False
	PedidoCompra_PedidoCompraInclusaoHora.Visible = False
	PedidoCompra_PedidoCompraEfetivacaoUsuarioId.Visible = False
	PedidoCompra_PedidoCompraEfetivacaoUsuarioNome.Visible = False
	PedidoCompra_PedidoCompraEfetivacaoData.Visible = False
	PedidoCompra_PedidoCompraEfetivacaoHora.Visible = False
	GridParcelas.Rows = 15
	GridProdutos.Rows = 15

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event Refresh

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	Do 'CheckSecurityForActions'

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event GridParcelas.Load

//	&Parametro.Load(&WWPContext_Login.GrupoEconomicoId,&WWPContext_Login.EmpresaId,&ParametroId)
	
	for each
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		where EmpresaId = &WWPContext_Login.EmpresaId
		where PedidoCompraId = &PedidoCompra.PedidoCompraId
		where PedidoCompraId <> 0
		defined by PedidoCompraParcelaValor
		
		&PedidoCompraParcelaSequenciaGrid = PedidoCompraParcelaSequencia
		&PedidoCompraParcelaDataVencimentoGrid = PedidoCompraParcelaDataVencimento
		&PedidoCompraParcelaValorGrid = PedidoCompraParcelaValor
		
		//		&SDTPedidoCompraParcela.PedidoCompraParcelaSequencia = PedidoCompraParcelaSequencia
		//		&SDTPedidoCompraParcela.PedidoCompraParcelaDataVencimento = PedidoCompraParcelaDataVencimento
		//		&SDTPedidoCompraParcela.PedidoCompraParcelaValor = PedidoCompraParcelaValor

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	//this code should be inside the For Each used to load the grid
	&DeleteParcela.FromImage(ActionDelete)
	&DeleteParcela.TooltipText = ""

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

		GridParcelas.Load()
		
	endfor

	&PedidoCompraParcelaSequenciaGrid = 0
	&PedidoCompraParcelaDataVencimentoGrid = nullvalue(&Today)
	&PedidoCompraParcelaValorGrid = 0

EndEvent

Event GridProdutos.Load

	for each
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		where EmpresaId = &WWPContext_Login.EmpresaId
		where PedidoCompraId = &PedidoId
		defined by PedidoCompraProdutoDescricao
		
		&PedidoCompraProdutoSequencia = PedidoCompraProdutoSequencia
		&PedidoCompraProdutoId = PedidoCompraProdutoId
		&PedidoCompraProdutoDescricao = PedidoCompraProdutoDescricao
		&PedidoCompraProdutoUM = PedidoCompraProdutoUM
		&PedidoCompraProdutoValorUnitario = PedidoCompraProdutoValorUnitario
		&PedidoCompraProdutoQuantidade = PedidoCompraProdutoQuantidade
		&PedidoCompraProdutoValorTotal = PedidoCompraProdutoValorTotal
		&TotPedidoCompraProdutoValorTotal += &PedidoCompraProdutoValorTotal
		&TotValuePedidoCompraProdutoValorTotal = &TotPedidoCompraProdutoValorTotal.ToFormattedString()

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	//this code should be inside the For Each used to load the grid
	&UpdateProduto = !'<i class="fas fa-pencil-alt"></i>'
	
	&DeleteProduto.FromImage(ActionDelete)
	&DeleteProduto.TooltipText = ""

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

		GridProdutos.Load()		
		
	endfor

	do 'EmptyFields'

EndEvent

Event 'DoBNovoProduto'

	do 'ValidateInsertProduto'
	
	if not &IsInvalid
		
		do 'CreateProduto'
		
	endif

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoBUpdateProduto'

	BtnBUpdateProduto.Visible = false
	BtnBNovoProduto.Visible = true
	
	do 'UpdateProduto'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoBNovoParcela'

	do 'CreateParcela'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoBEditarParcelas'

	&Method_Custom.ExecutaComando('Method_Methods.EditGrid()')
	BtnBConfirmarParcelas.Visible = true
	BtnBEditarParcelas.Visible = false

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoBConfirmarParcelas'

	&Method_Custom.ExecutaComando('Method_Methods.DoneGrid();')
	BtnBConfirmarParcelas.Visible = false
	BtnBEditarParcelas.Visible = true

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoBRecalculaParcelas'

	if &IsFirstClick
		BtnBRecalculaParcelas.Caption = 'Recalcular Parcelas'
		&IsFirstClick = false
	endif

	do 'RecalcularParcelas'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptMotivoDespesa'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptMotivoDespesaReceita.PopUp(&SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaId)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptCentroCusto'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptCentroCustoReceita.PopUp(&SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoId)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptProduto'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptProdutoEmpresa.PopUp(&SDTPedidoCompraProduto.PedidoCompraProdutoId, &SDTPedidoCompraProduto.PedidoCompraProdutoDescricao)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptFuncionario'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptParticipanteFuncionario.PopUp(&PedidoCompra.PedidoCompraFuncionarioId, &PedidoCompra.PedidoCompraFuncionarioRazaoSocial)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptTransportadora'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptParticipantePTransportadora.PopUp(&PedidoCompra.PedidoCompraTransportadoraId, &PedidoCompra.PedidoCompraTransportadoraRazaoSocial)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptCondicaoPagamento'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptCondicaoPagamento.PopUp(&PedidoCompra.PedidoCompraCondicaoPagamentoId, &PedidoCompra.PedidoCompraCondicaoPagamentoDescricao)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptFornecedor'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptParticipanteFornecedor.PopUp(&PedidoCompra.PedidoCompraFornecedorId, &PedidoCompra.PedidoCompraFornecedorRazaoSocial)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Sub 'CheckSecurityForActions'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptmotivodespesareceita_Execute')
	If not (&TempBoolean)
		PromptMotivoDespesa.Visible = False
	Endif 
	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptcentrocustoreceita_Execute')
	If not (&TempBoolean)
		PromptCentroCusto.Visible = False
	Endif 
	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptitemempresa_Execute')
	If not (&TempBoolean)
		PromptProduto.Visible = False
	Endif 
	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptparticipantefuncionario_Execute')
	If not (&TempBoolean)
		PromptFuncionario.Visible = False
	Endif 
	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptparticipante_Execute')
	If not (&TempBoolean)
		PromptTransportadora.Visible = False
	Endif 
	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptcondicaopagamento_Execute')
	If not (&TempBoolean)
		PromptCondicaoPagamento.Visible = False
	Endif 
	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptparticipantefornecedor_Execute')
	If not (&TempBoolean)
		PromptFornecedor.Visible = False
	Endif

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndSub

Event 'DoBUpdateParcela'

	do 'ChangeParcela'

EndEvent

Event &UpdateProduto.Click

	BtnBUpdateProduto.Visible = true
	BtnBNovoProduto.Visible = false
	
	do 'LoadProduto'

EndEvent

Event &DeleteProduto.Click

	&PedidoCompra.Produto.RemoveByKey(&PedidoCompraProdutoSequencia)
	
	&PedidoCompra.Save()
	
	if &PedidoCompra.Success()
		commit
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor			
	endif
	
	GridProdutos.Refresh()

EndEvent

Event Method_Custom.blurCampo(&CampoVal)

	for &OneValue in &CampoVal
		
		do case
			case &OneValue = PedidoCompra_PedidoCompraFornecedorId.InternalName
				do 'FornecedorId'
			case &OneValue = PedidoCompra_PedidoCompraCondicaoPagamentoId.InternalName
				do 'CondicaoPagamentoId'
			case &OneValue = PedidoCompra_PedidoCompraFuncionarioId.InternalName
				do 'FuncionarioId'
			case &OneValue = PedidoCompra_PedidoCompraTransportadoraId.InternalName
				do 'TransportadoraId'
			case &OneValue = PedidoCompra_PedidoCompraObservacao.InternalName
				do 'Observacao'
			case &OneValue = SDTPedidoCompraProduto_PedidoCompraProdutoId.InternalName
				do 'ProdutoId'
			case &OneValue = SDTPedidoCompraProduto_PedidoCompraProdutoQuantidade.InternalName
				do 'Quantidade'
			case &OneValue = SDTPedidoCompraProduto_PedidoCompraProdutoIPI.InternalName
				do 'IPI'
			case &OneValue = SDTPedidoCompraProduto_PedidoCompraProdutoCentroCustoId.InternalName
				do 'CentroCusto'
			case &OneValue = SDTPedidoCompraProduto_PedidoCompraProdutoMotivoDespesaId.InternalName
				do 'MotivoDespesa'
		endcase
		
		if &IsInvalid
			&IsInvalid = false
			exit
		endif
		
	endfor

EndEvent

Event GXUITabsPanel_Tabs.TabChanged

	if GXUITabsPanel_Tabs.ActivePage = 2 and BtnBUpdateProduto.Visible = false
		BtnBNovoProduto.Visible = true
	else
		BtnBNovoProduto.Visible = false
		BtnBUpdateProduto.Visible = false		
	endif
	if GXUITabsPanel_Tabs.ActivePage = 3
		BtnBRecalculaParcelas.Visible = true
		BtnBNovoParcela.Visible = true
		BtnBEditarParcelas.Visible = true
	else
		BtnBRecalculaParcelas.Visible = false
		BtnBNovoParcela.Visible = false
		BtnBConfirmarParcelas.Visible = false
		BtnBEditarParcelas.Visible = false
	endif

EndEvent

Event PedidoCompra_PedidoCompraFreteIndicador.IsValid

	if &PedidoCompra.PedidoCompraFreteIndicador <> "S"
		PedidoCompra_PedidoCompraFreteValor.Enabled = true
	else
		PedidoCompra_PedidoCompraFreteValor.Enabled = false
	endif

EndEvent

Event &DeleteParcela.Click

//	&PedidoCompra.Load(&WWPContext_Login.GrupoEconomicoId, &WWPContext_Login.EmpresaId, &PedidoId)

	&PedidoCompra.Parcela.RemoveByKey(&PedidoCompraParcelaSequenciaGrid)
	
	&PedidoCompra.Save()
	
	if &PedidoCompra.Success()
		commit
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor			
	endif
	
	GridParcelas.Refresh()

EndEvent

Sub 'CreateParcela'

	&PedidoCompraParcela = new()
	&PedidoCompraParcela.PedidoCompraParcelaSequencia = Max(PedidoCompraParcelaSequencia, GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId and EmpresaId = &WWPContext_Login.EmpresaId and PedidoCompraId = &PedidoId, 0) + 1
	&PedidoCompraParcela.PedidoCompraParcelaDataVencimento = &PedidoCompraParcelaDataVencimento
	&PedidoCompraParcela.PedidoCompraParcelaValor = &PedidoCompraParcelaValor
	
//	&Method_Custom.ConsoleLog(&PedidoCompraParcela.ToJson())

	&PedidoCompra.Parcela.Add(&PedidoCompraParcela)
	
	&PedidoCompra.Save()
	
	if &PedidoCompra.Success()
		commit
		&IsFirstTime = false
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor		
	endif
	
	GridParcelas.Refresh()

EndSub

Sub 'ChangeParcela'

	&PedidoCompraParcelaSequencia = &PedidoCompraParcelaSequencia
	&PedidoCompraParcelaDataVencimento = &PedidoCompraParcelaDataVencimento
	&PedidoCompraParcelaValor = &PedidoCompraParcelaValor

	&PedidoCompraParcela = new()
	
	&PedidoCompraParcela.PedidoCompraParcelaSequencia = &PedidoCompraParcelaSequencia
	&PedidoCompraParcela.PedidoCompraParcelaDataVencimento = &PedidoCompraParcelaDataVencimento
	&PedidoCompraParcela.PedidoCompraParcelaValor = &PedidoCompraParcelaValor
	
	&StringAux = &PedidoCompraParcela.ToJson()
	
	&NumAux = &PedidoCompraParcelaSequencia
	
	&PedidoCompra.Parcela.GetByKey(&NumAux).FromJson(&StringAux)
	
	&PedidoCompra.Save()
	
	if &PedidoCompra.Success()
		commit
		&IsFirstTime = false
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor		
	endif

	GridParcelas.Refresh()

EndSub

Sub 'RecalcularParcelas'

	do 'CalculaParcelas'
	
	GridParcelas.Refresh()

EndSub

Sub 'LoadParcela'

	&PedidoCompraParcelaValor = &PedidoCompraParcelaValorGrid
	&PedidoCompraParcelaDataVencimento = &PedidoCompraParcelaDataVencimentoGrid
	&PedidoCompraParcelaSequencia = &PedidoCompraParcelaSequenciaGrid

//	&PedidoCompraParcelaValor = &SDTPedidoCompraParcela.PedidoCompraParcelaValor
//	&PedidoCompraParcelaDataVencimento = &SDTPedidoCompraParcela.PedidoCompraParcelaDataVencimento
//	&PedidoCompraParcelaSequencia = &SDTPedidoCompraParcela.PedidoCompraParcelaSequencia
	
	if not &IsToggled
		&Method_Custom.HideShow("HTML_DVPANEL_LEVEL31")
		&IsToggled = true
	endif

	BtnBNovoParcela.Visible = false

EndSub

Sub 'DeletaParcela'

	&NumAux = &PedidoCompraParcelaSequenciaGrid
	
//	&NumAux = &SDTPedidoCompraParcela.PedidoCompraParcelaSequencia
	
	&PedidoCompra.Parcela.RemoveByKey(&NumAux)
	
	&PedidoCompra.Save()
	
	if &PedidoCompra.Success()
		commit
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor			
	endif
	
	GridParcelas.Refresh()

EndSub

Sub 'CalculaParcelas'

	&PedidoCompra.Parcela.Clear()
	
	&PedidoCompra.Save()
		
	if &PedidoCompra.Success()
		commit
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor			
	endif	
	
	for each
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		where CondicaoPagamentoId = &PedidoCompra.PedidoCompraCondicaoPagamentoId
		defined by CondicaoPagamentoParcelaDias
		
		&PedidoCompraParcela = new()	
		
		&PedidoCompraParcela.PedidoCompraParcelaSequencia = CondicaoPagamentoParcelaId
		&PedidoCompraParcela.PedidoCompraParcelaDataVencimento = &Today + CondicaoPagamentoParcelaDias
		&PedidoCompraParcela.PedidoCompraParcelaValor = &TotValuePedidoCompraProdutoValorTotal.ToNumeric() * CondicaoPagamentoParcelaPercentual/100
		
		&PedidoCompra.Parcela.Add(&PedidoCompraParcela)
		
		&PedidoCompra.Save()
		
		if &PedidoCompra.Success()
			commit
		else
			&Messages = &PedidoCompra.GetMessages()
			for &oneMessage in &Messages
				&Method_Custom.ConsoleLog(&oneMessage.Description)
			endfor			
		endif		
		
	endfor

EndSub

Sub 'LoadProduto'

	&PedidoCompra.Load(&WWPContext_Login.GrupoEconomicoId, &WWPContext_Login.EmpresaId, &PedidoId)
	
	&PedidoCompraProdutoSequencia = &PedidoCompraProdutoSequencia // Não remover, variável perde a referência se não fizer isso

	&StringAux = &PedidoCompra.Produto.GetByKey(&PedidoCompraProdutoSequencia).ToJson()
	
	&PedidoCompraProduto.FromJson(&StringAux)
	
	&StringAux = &PedidoCompraProduto.ToJson()
	
	&SDTPedidoCompraProduto.FromJson(&StringAux)
	
	SDTPedidoCompraProduto_PedidoCompraProdutoId.SetFocus()

EndSub

Sub 'Observacao'

	GXUITabsPanel_Tabs.SelectTab(2)
	SDTPedidoCompraProduto_PedidoCompraProdutoId.SetFocus()

EndSub

Sub 'CreateProduto'

	do 'CheckFirstTime'
	
	&SequenciaAtual += 1
	
	&PedidoCompraProduto = new()
	
	&PedidoCompraProduto.FromJson(&SDTPedidoCompraProduto.ToJson())
	
	&PedidoCompraProduto.PedidoCompraProdutoSequencia = &SequenciaAtual
	
	&PedidoCompra.Produto.Add(&PedidoCompraProduto)
	
	&PedidoCompra.Save()
	
	if &PedidoCompra.Success()
		commit
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor			
	endif

	GridProdutos.Refresh()

EndSub

Sub 'UpdateProduto'

	&SDTPedidoCompraProduto = &SDTPedidoCompraProduto

	&StringAux = &SDTPedidoCompraProduto.ToJson()
	
	&NumAux = &SDTPedidoCompraProduto.PedidoCompraProdutoSequencia
	
	&PedidoCompra.Produto.GetByKey(&NumAux).FromJson(&StringAux)
	
	&PedidoCompra.Update()
	
	if &PedidoCompra.Success()
		commit
		&IsFirstTime = false
	else
		&Messages = &PedidoCompra.GetMessages()
		for &oneMessage in &Messages
			&Method_Custom.ConsoleLog(&oneMessage.Description)
		endfor		
	endif
	
	GridProdutos.Refresh()

EndSub

Sub 'CheckFirstTime'

	if &IsFirstTime
		
		&PedidoCompra.GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		&PedidoCompra.PedidoCompraId = max(PedidoCompraId, GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId and EmpresaId = &WWPContext_Login.EmpresaId, 0) + 1
		&PedidoCompra.EmpresaId = &WWPContext_Login.EmpresaId
		
		&PedidoCompra.Insert()
		
		if &PedidoCompra.Success()
			commit
			&IsFirstTime = false
			&PedidoId = &PedidoCompra.PedidoCompraId
		else
			&Messages = &PedidoCompra.GetMessages()
			for &oneMessage in &Messages
				&Method_Custom.ConsoleLog('CheckFirstTime error: ' + &oneMessage.Description)
			endfor			
			
		endif
		
	endif

EndSub

Sub 'EmptyFields'

	&SDTPedidoCompraProduto.PedidoCompraProdutoId						= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoDescricao				= ""
	&SDTPedidoCompraProduto.PedidoCompraProdutoUM						= ""
	&SDTPedidoCompraProduto.PedidoCompraProdutoPrecoCompra				= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoValorUnitario			= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoQuantidade				= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoQuantidadeSaldo			= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoPrazoEntrega				= nullvalue(&Today)
	&SDTPedidoCompraProduto.PedidoCompraProdutoIPI						= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoICMS						= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoValorTotal				= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoValorTotalIPI			= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoId			= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoDescricao		= ""
	&SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaId			= 0
	&SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaDescricao	= ""
	&TotPedidoCompraProdutoValorTotal									= 0
	
	if GXUITabsPanel_Tabs.ActivePage = 2
		BtnBNovoProduto.Visible = true
	endif
	
	BtnBUpdateProduto.Visible = false

EndSub

Sub 'FornecedorId'

//isValid

	for each
		where ParticipanteId = &PedidoCompra.PedidoCompraFornecedorId
		where ParticipanteFornecedor = true
		defined by ParticipanteRazaoSocial
		
		&PedidoCompra.PedidoCompraFornecedorRazaoSocial = ParticipanteRazaoSocial
		
	when none
		&PedidoCompra.PedidoCompraFornecedorRazaoSocial = 'FORNECEDOR INVÁLIDO'
		PedidoCompra_PedidoCompraFornecedorId.SetFocus()
		MsgCustom.Normal('Erro', 'Fornecedor Inválido', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		&IsInvalid = true
	endfor

	if not &IsInvalid
		PromptFornecedorContato.Popup(&PedidoCompra.PedidoCompraFornecedorId, &PedidoCompra.PedidoCompraFornecedorContato, &PedidoCompra.PedidoCompraFornecedorEmail, &PedidoCompra.PedidoCompraFornecedorFone )
	endif

EndSub

Sub 'CondicaoPagamentoId'

//isValid

	for each
		where CondicaoPagamentoId = &PedidoCompra.PedidoCompraCondicaoPagamentoId
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		defined by CondicaoPagamentoDescricao
		
		&PedidoCompra.PedidoCompraCondicaoPagamentoDescricao = CondicaoPagamentoDescricao
		
	when none
		&PedidoCompra.PedidoCompraCondicaoPagamentoDescricao = 'CONDIÇÃO INVÁLIDA'
		PedidoCompra_PedidoCompraCondicaoPagamentoId.SetFocus()
		MsgCustom.Normal('Erro', 'Condição Inválida', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		&IsInvalid = true
	endfor

EndSub

Sub 'FuncionarioId'

//isValid

	for each
		where ParticipanteId = &PedidoCompra.PedidoCompraFuncionarioId
		where ParticipanteFuncionario = true
		defined by ParticipanteRazaoSocial
		
		&PedidoCompra.PedidoCompraFuncionarioRazaoSocial = ParticipanteRazaoSocial
		
	when none
		&PedidoCompra.PedidoCompraFuncionarioRazaoSocial = 'FUNCIONÁRIO INVÁLIDO'
		PedidoCompra_PedidoCompraFuncionarioId.SetFocus()
		MsgCustom.Normal('Erro', 'Funcionário Inválido', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		&IsInvalid = true
	endfor

EndSub

Sub 'TransportadoraId'

//isValid

	for each
		where ParticipanteId = &PedidoCompra.PedidoCompraTransportadoraId
		where ParticipanteTransportadora = true
		defined by ParticipanteRazaoSocial
		
		&PedidoCompra.PedidoCompraTransportadoraRazaoSocial = ParticipanteRazaoSocial
		
	when none
		&PedidoCompra.PedidoCompraTransportadoraRazaoSocial = 'TRANSPORTADORA INVÁLIDA'
		PedidoCompra_PedidoCompraTransportadoraId.SetFocus()
		MsgCustom.Normal('Erro', 'Transportadora Inválida', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		&IsInvalid = true
	endfor

EndSub

Sub 'ProdutoId'

//isValid

	for each
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		where ProdutoId = &SDTPedidoCompraProduto.PedidoCompraProdutoId
		where EmpresaId = &WWPContext_Login.EmpresaId
		defined by ProdutoEmpresaPrecoCompra
		
		&SDTPedidoCompraProduto.PedidoCompraProdutoDescricao = ProdutoDescricao
//		&SDTPedidoCompraProduto.PedidoCompraProdutoUM = ProdutoUnidadeMedida
		&SDTPedidoCompraProduto.PedidoCompraProdutoPrecoCompra = ProdutoEmpresaPrecoCompra
		
	when none
		&SDTPedidoCompraProduto.PedidoCompraProdutoDescricao = 'PRODUTO INVÁLIDO'
		SDTPedidoCompraProduto_PedidoCompraProdutoId.SetFocus()
		MsgCustom.Normal('Erro', 'Produto Inválido', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		&IsInvalid = true
	endfor

EndSub

Sub 'ValorUnitario'

//isValid

	if &SDTPedidoCompraProduto.PedidoCompraProdutoValorUnitario > 0
		
		&IsInvalid = false
		
	else
		
		SDTPedidoCompraProduto_PedidoCompraProdutoValorUnitario.SetFocus()
		MsgCustom.Normal('Erro', 'Valor unitário precisa ser maior do que 0', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		&IsInvalid = true
		
	endif

EndSub

Sub 'Quantidade'

//isValid

	if &SDTPedidoCompraProduto.PedidoCompraProdutoQuantidade > 0
		
		&SDTPedidoCompraProduto.PedidoCompraProdutoQuantidadeSaldo = &SDTPedidoCompraProduto.PedidoCompraProdutoQuantidade
		
		&SDTPedidoCompraProduto.PedidoCompraProdutoValorTotal = &SDTPedidoCompraProduto.PedidoCompraProdutoQuantidade * &SDTPedidoCompraProduto.PedidoCompraProdutoValorUnitario
		
		&IsInvalid = false
		
	else
		
		SDTPedidoCompraProduto_PedidoCompraProdutoQuantidade.SetFocus()
		MsgCustom.Normal('Erro', 'Quantidade precisa ser maior do que 0', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		&IsInvalid = true
		
	endif

EndSub

Sub 'IPI'

//isValid

	&SDTPedidoCompraProduto.PedidoCompraProdutoValorTotalIPI = &SDTPedidoCompraProduto.PedidoCompraProdutoValorTotal * (1 + (&SDTPedidoCompraProduto.PedidoCompraProdutoIPI / 100))

EndSub

Sub 'CentroCusto'

//isValid

	for each
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		where CentroCustoReceitaId = &SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoId
		defined by CentroCustoReceitaDescricao
		
		&SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoDescricao = CentroCustoReceitaDescricao
		
	when none
		if &SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoId <> 0
			&SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoDescricao = 'CENTRO DE CUSTO/RECEITA INVÁLIDO'
			SDTPedidoCompraProduto_PedidoCompraProdutoCentroCustoId.SetFocus()
			MsgCustom.Normal('Erro', 'Centro de Custo/Receita Inválido', DVMessageType.error, &MessageError)
			&Method_Custom.PNotify(&MessageError)
			&IsInvalid = true
		else
			&SDTPedidoCompraProduto.PedidoCompraProdutoCentroCustoDescricao = "Sem Centro de Custo/Receita"
		endif
	endfor

EndSub

Sub 'MotivoDespesa'

//isValid

	for each
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		where MotivoDespesaReceitaId = &SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaId
		defined by MotivoDespesaReceitaDescricao
		
		&SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaDescricao = MotivoDespesaReceitaDescricao
		
	when none
		if &SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaId <> 0
			&SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaDescricao = 'MOTIVO DE DESPESA/RECEITA INVÁLIDO'
			SDTPedidoCompraProduto_PedidoCompraProdutoMotivoDespesaId.SetFocus()
			MsgCustom.Normal('Erro', 'Motivo de Despesa/Receita Inválido', DVMessageType.error, &MessageError)
			&Method_Custom.PNotify(&MessageError)
			&IsInvalid = true
		else
			&SDTPedidoCompraProduto.PedidoCompraProdutoMotivoDespesaDescricao = "Sem Motivo de Despesa/Receita"
		endif
	endfor

EndSub

Sub 'ValidateInsertProduto'

	//Valida se a inserção do produto é válida
		
	//Valida ProdutoId
	do 'ProdutoId'
	
	if not &IsInvalid
		
		do 'ValorUnitario'
		
		if not &IsInvalid
			
			do 'Quantidade'
			
			if not &IsInvalid
				
				do 'CentroCusto'
				
				if not &IsInvalid
					
					do 'MotivoDespesa'
					
				endif
				
			endif
			
		endif
		
	endif

EndSub


