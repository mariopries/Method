
Event Start

	LoadWWPContext_Login.Call(&WWPContext_Login)
	
	if &FornecedorId <> 0
		&IsUpdate = true
		&Participante.Load(&WWPContext_Login.GrupoEconomicoId, &FornecedorId)
		&Fornecedor.Load(&WWPContext_Login.GrupoEconomicoId, &FornecedorId)
	else
		&IsInsert = true
		&Participante = new()
		&Fornecedor = new()
		&Participante.ParticipanteData = &Today
		&Participante.ParticipanteAtivo = true
		Participante_ParticipanteAtivo.Enabled = false
		Participante_ParticipanteInscricaoEstadual.Enabled = false		
	endif

	Participante_ParticipanteData.Enabled = false

	//Não está funcionando o read only
	Fornecedor_FornecedorRamoAtividadeDescricao.Enabled = false
	

	if &Participante.ParticipanteTipo = 'J'
		UnnamedTableParticipante_ParticipanteCPF.Visible = false
		UnnamedTableParticipante_ParticipanteRG.Visible = false				
	else
		UnnamedTableParticipante_ParticipanteCNPJ.Visible = false
	endif

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	Fornecedor_GrupoEconomicoId.Visible = False
	Fornecedor_FornecedorId.Visible = False
	Participante_ParticipantePaisId.Visible = False
	Participante_GrupoEconomicoId.Visible = False

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event Refresh

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	Do 'CheckSecurityForActions'

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptRamo'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptRamoAtividade.PopUp(&Fornecedor.FornecedorRamoAtividadeId, &Fornecedor.FornecedorRamoAtividadeDescricao)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event 'DoPromptCEP'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	PromptCEP.PopUp(&Participante.ParticipanteCEP, &Participante.ParticipanteEndereco, &Participante.ParticipanteEnderecoBairro, &Participante.ParticipanteEnderecoComplemento, &Participante.ParticipanteCidadeId, &Participante.ParticipanteCidadeNome, &Participante.ParticipanteEstadoId)

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Sub 'CheckSecurityForActions'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptramoatividade_Execute')
	If not (&TempBoolean)
		PromptRamo.Visible = False
	Endif 
	&TempBoolean = SecGAMIsAuthByFunctionalityKey.Udp(!'promptcep_Execute')
	If not (&TempBoolean)
		PromptCEP.Visible = False
	Endif

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndSub

Event Enter

	do 'IsValid'
	
	if &IsFail
			MsgCustom.Normal('Erro', 'Erro de validação', DVMessagetype.error, &MessageError)
			&Method_Custom.PNotify(&MessageError)
	else	
		if &IsInsert
			&Participante.ParticipanteId = max(ParticipanteId, GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId)
			&Participante.ParticipanteId += 1
			&Fornecedor.FornecedorId = &Participante.ParticipanteId
			&Participante.GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
			&Participante.ParticipanteFornecedor = true
			&Fornecedor.GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		endif
		&Participante.Save()
		&Fornecedor.Save()
		
		if &Participante.Success() and &Fornecedor.Success()
			commit
			return
		else
			&Messages = &Participante.GetMessages()
			
			for &OneMessage in &Messages
				MsgCustom.Normal('Erro', &OneMessage.Description, DVMessagetype.error, &MessageError)
				&Method_Custom.PNotify(&MessageError)
			endfor
			
			&Participante.ParticipanteId = &FornecedorId
			&Fornecedor.FornecedorId = &FornecedorId
		endif
	endif

EndEvent

Event Method_Custom.blurCampo(&CampoVal)

	for &OneValue in &CampoVal
		do case
			case &OneValue = Fornecedor_FornecedorRamoAtividadeId.InternalName
				do 'Fornecedor_FornecedorRamoAtividadeId.IsValid'
			case &OneValue = Participante_ParticipanteInscricaoMunicipal.InternalName
				do 'Participante_ParticipanteInscricaoMunicipal.IsValid'
			case &OneValue = Participante_ParticipanteInscricaoEstadual.InternalName
				do 'Participante_ParticipanteInscricaoEstadual'
			case &OneValue = Participante_ParticipanteCEP.InternalName
				do 'Participante_ParticipanteCEP.IsValid'
			case &OneValue = Participante_ParticipanteCidadeId.InternalName
				do 'Participante_ParticipanteCidadeId.IsValid'
			case &OneValue = Participante_ParticipanteTipo.InternalName
				do 'Participante_ParticipanteTipo.IsValid'
			case &OneValue = Participante_ParticipanteCNPJ.InternalName
				do 'Participante_ParticipanteCNPJ.IsValid'
			case &OneValue = Participante_ParticipanteCPF.InternalName
				do 'Participante_ParticipanteCPF.IsValid'
		endcase
	
		if &IsInvalid
			&IsInvalid = false
			exit
		endif
		
	endfor

	&CampoVal.Clear()

//	MsgCustom.Normal('Blur', &CampoVal, DVMessageType.information, &MessageError)
//	&Javascript.PNotify(&MessageError)

EndEvent

Sub 'Participante_ParticipanteInscricaoEstadual'

	PValidaIE.Call(&Participante.ParticipanteInscricaoEstadual, &Participante.ParticipanteEstadoId, &IsValid)
	
	if not &IsValid
		MsgCustom.Normal('Erro', 'Inscrição Estadual Inválida', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		Participante_ParticipanteInscricaoEstadual.SetFocus()
		&IsInvalid = true
	endif

EndSub

Sub 'Participante_ParticipanteTipo.IsValid'

	if &Participante.ParticipanteTipo = 'F'
		UnnamedTableParticipante_ParticipanteCPF.Visible = true
		UnnamedTableParticipante_ParticipanteRG.Visible = true
		UnnamedTableParticipante_ParticipanteCNPJ.Visible = false
	else
		UnnamedTableParticipante_ParticipanteCPF.Visible = false
		UnnamedTableParticipante_ParticipanteRG.Visible = false
		UnnamedTableParticipante_ParticipanteCNPJ.Visible = true
	endif

EndSub

Sub 'Participante_ParticipanteCNPJ.IsValid'

	if &Participante.ParticipanteTipo = 'J'
		
		PVerificaTipoPessoa.Call(&Participante.ParticipanteCNPJ, 'J', &IsErro)
		
		if &IsErro
			MsgCustom.Normal('Erro', 'CPNJ Inválido', DVMessageType.error, &MessageError)
			&Method_Custom.PNotify(&MessageError)
			Participante_ParticipanteCNPJ.SetFocus()
			&IsInvalid = true
		endif
		
	endif

EndSub

Sub 'Participante_ParticipanteCPF.IsValid'

	if &Participante.ParticipanteTipo = 'F'
		
		PVerificaTipoPessoa.Call(&Participante.ParticipanteCPF, 'F', &IsErro)
		
		if &IsErro
			MsgCustom.Normal('Erro', 'CPF Inválido', DVMessageType.error, &MessageError)
			&Method_Custom.PNotify(&MessageError)
			Participante_ParticipanteCPF.SetFocus()
			&IsInvalid = true
		endif
		
	endif

EndSub

Sub 'Participante_ParticipanteCidadeId.IsValid'

	for each
		order CidadeGrupoEconomicoId
		where CidadeGrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId or CidadeGrupoEconomicoId = 0
		where CidadeId = &Participante.ParticipanteCidadeId
		defined by CidadeNome
		
		&Participante.ParticipanteCidadeNome = CidadeNome
		&Participante.ParticipanteEstadoId = CidadeEstadoId
		&Participante.ParticipantePaisId = PaisId
		&Participante.ParticipantePaisNome = PaisNome
		Participante_ParticipanteInscricaoEstadual.Enabled = true
		exit
		
	when none
		&Participante.ParticipanteCidadeNome = 'CIDADE INVÁLIDA'
		&Participante.ParticipanteEstadoId = 'ER'
		&Participante.ParticipantePaisNome = 'ERRO'
		Participante_ParticipanteInscricaoEstadual.Enabled = false
		MsgCustom.Normal('Erro', 'Cidade Inválida', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		Participante_ParticipanteCidadeId.SetFocus()
		&IsInvalid = true
	endfor

	if &Participante.ParticipanteEstadoId = 'EX'
		&Participante.ParticipanteInscricaoEstadual = 'ISENTO'
		Participante_ParticipanteInscricaoEstadual.Enabled = false
		&Participante.ParticipanteInscricaoMunicipal = 'ISENTO'
		Participante_ParticipanteInscricaoMunicipal.Enabled = false
	endif

EndSub

Sub 'Participante_ParticipanteCEP.IsValid'

	for each
		order CEPGrupoEconomicoId
		where CEPGrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId or CEPGrupoEconomicoId = 0
		where CEPId = &Participante.ParticipanteCEP
		defined by CEPEndereco
		
		&Participante.ParticipanteEndereco = CEPEndereco
		&Participante.ParticipanteEnderecoBairro = CEPBairro
		&Participante.ParticipanteEnderecoComplemento = CEPComplemento
		&Participante.ParticipanteCidadeId = CEPCidadeId
		&Participante.ParticipanteCidadeNome = CEPCidadeNome
		&Participante.ParticipanteEstadoId = CEPCidadeEstadoId
		&Participante.ParticipantePaisId = PaisId
		&Participante.ParticipantePaisNome = PaisNome
		Participante_ParticipanteInscricaoEstadual.Enabled = true
		exit
		
	endfor

EndSub

Sub 'Participante_ParticipanteInscricaoMunicipal.IsValid'

	GXUITabsPanel_Tabs.SelectTab(2)
	Fornecedor_FornecedorEnquadramentoFiscal.SetFocus()

EndSub

Sub 'Fornecedor_FornecedorRamoAtividadeId.IsValid'

	for each
		where GrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId
		where RamoAtividadeId = &Fornecedor.FornecedorRamoAtividadeId
		defined by RamoAtividadeDescricao
		
		&Fornecedor.FornecedorRamoAtividadeDescricao = RamoAtividadeDescricao	
	when none
		MsgCustom.Normal('Erro', 'Ramo Inválido', DVMessageType.error, &MessageError)
		&Method_Custom.PNotify(&MessageError)
		Fornecedor_FornecedorRamoAtividadeId.SetFocus()
		&IsInvalid = true
	endfor

EndSub

Sub 'IsValid'

	if &Participante.ParticipanteTipo = 'J'
		PVerificaTipoPessoa.Call(&Participante.ParticipanteCNPJ, &Participante.ParticipanteTipo, &IsErro)
	else
		PVerificaTipoPessoa.Call(&Participante.ParticipanteCPF, &Participante.ParticipanteTipo, &IsErro)
	endif
	
	if &IsErro
		&IsFail = true
		
	else
		PValidaIE.Call(&Participante.ParticipanteInscricaoEstadual, &Participante.ParticipanteEstadoId, &IsValid)	
		
		if not &IsValid
			&IsFail = true
		else
			
			for each
				order CidadeGrupoEconomicoId
				where CidadeGrupoEconomicoId = &WWPContext_Login.GrupoEconomicoId or CidadeGrupoEconomicoId = 0
				where CidadeId = &Participante.ParticipanteCidadeId
				defined by CidadeNome
				
			when none
				&IsFail = true
			endfor
			
		Endif
		
	Endif

EndSub


